{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactItem/ContactItem.styled.jsx","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList/ContactList.jsx","App.styled.jsx","App.jsx","index.js"],"names":["Form","styled","form","ContactForm","state","name","number","handleSubmit","e","preventDefault","props","availabilityСheck","contactAdding","id","uuidv4","setState","this","handleChange","onSubmit","type","pattern","title","required","onChange","bind","value","Component","Label","label","Filter","filter","ListItem","li","ContactItem","contactRemoving","onClick","ContactList","contacts","map","Container","div","App","contactsFiltering","key","toLowerCase","includes","newContact","elem","inputName","find","alert","target","trim","JSON","parse","localStorage","getItem","error","console","log","prevProps","prevContacts","length","data","stringify","setItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAmDeA,EAjDFC,IAAOC,KAAV,28B,OCGWC,E,4MACnBC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAIVC,aAAe,SAAAC,GACbA,EAAEC,iBAEF,yBACEL,MAASC,EADX,EACWA,KAAMC,EADjB,EACiBA,OADjB,IAEEI,MAASC,EAFX,EAEWA,uBAAmBC,EAF9B,EAE8BA,eAG1BD,EAAkBN,IAAUA,GAASC,IAIzCM,EAAc,CAAEC,GAAIC,cAAUT,OAAMC,WACpC,EAAKS,SAAS,CAAEV,KAAM,GAAIC,OAAQ,O,4CAIpC,WACE,MAIIU,KAHFZ,MAASC,EADX,EACWA,KAAMC,EADjB,EACiBA,OACfC,EAEES,KAFFT,aACSU,EACPD,KADFN,MAASO,aAGX,OACE,eAAC,EAAD,CAAMC,SAAUX,EAAhB,UACE,yCAEE,uBACEY,KAAK,OACLd,KAAK,OACLe,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUN,EAAaO,KAAKR,MAC5BS,MAAOpB,OAGX,iDAEE,uBACEc,KAAK,MACLd,KAAK,SACLe,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAUN,EAAaO,KAAKR,MAC5BS,MAAOnB,OAGX,wBAAQa,KAAK,SAAb,gC,GAzDiCO,aCY1BC,EAfD1B,IAAO2B,MAAV,oNCWIC,EATA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQb,EAAmB,EAAnBA,aACxB,OACE,eAAC,EAAD,mCAEE,uBAAOE,KAAK,OAAOd,KAAK,SAASkB,SAAUN,EAAcQ,MAAOK,QC2CvDC,EAjDE9B,IAAO+B,GAAV,q6BCaCC,EAXK,SAAC,GAA2C,IAAzCpB,EAAwC,EAAxCA,GAAIR,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,OAAQ4B,EAAsB,EAAtBA,gBACvC,OACE,eAAC,EAAD,WACE,yCAAU7B,EAAV,aAAmBC,KACnB,wBAAQa,KAAK,SAAS,UAASN,EAAIsB,QAAS,kBAAMD,EAAgBrB,IAAlE,wBCYSuB,EAhBK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUH,EAAsB,EAAtBA,gBAC/B,OACE,6BACGG,EAASC,KAAI,gBAAGzB,EAAH,EAAGA,GAAIR,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,cAAC,EAAD,CAEEO,GAAIA,EACJR,KAAMA,EACNC,OAAQA,EACR4B,gBAAiBA,GAJZrB,SCHA0B,EAJGtC,IAAOuC,IAAV,8CC4GAC,E,4MAvGbrC,MAAQ,CACNiC,SAAU,GACVP,OAAQ,I,EAIVY,kBAAoB,SAAAC,GAClB,OAAO,EAAKvC,MAAMiC,SAASP,QAAO,qBAAGzB,KAC9BuC,cAAcC,SAASF,EAAIC,mB,EAKpChC,cAAgB,SAAAkC,GACd,EAAK/B,UAAS,gBAAGsB,EAAH,EAAGA,SAAUP,EAAb,EAAaA,OAAb,MAA2B,CACvCO,SAAS,GAAD,mBAAMA,GAAN,CAAgBS,IACxBhB,c,EAKJI,gBAAkB,SAAArB,GAChB,EAAKE,UAAS,YAA2B,IAAxBsB,EAAuB,EAAvBA,SAAUP,EAAa,EAAbA,OACzB,MAAO,CACLO,SAAUA,EAASP,QAAO,SAAAiB,GAAI,OAAIA,EAAKlC,KAAOA,KAC9CiB,c,EAMNnB,uBAAoB,SAAAqC,GAKlB,QAJwB,EAAK5C,MAAMiC,SAASY,MAC1C,qBAAG5C,KAAgBuC,gBAAkBI,EAAUJ,mBAI/CM,MAAM,GAAD,OAAIF,EAAJ,6BACE,I,kDAMX,SAAaxC,GACX,IAAMH,EAAOG,EAAE2C,OAAO9C,KACtBW,KAAKD,SAAL,eAAiBV,EAAOG,EAAE2C,OAAO1B,MAAM2B,W,+BAGzC,WAEE,IAAIf,EACJ,IACEA,EAAWgB,KAAKC,MAAMC,aAAaC,QAAQ,cAC3C,MAAOC,GACPC,QAAQC,IAAIF,GAGVpB,GACFrB,KAAKD,SAASsB,K,gCAIlB,SAAmBuB,EAAnB,GAA2D,IAAjBC,EAAgB,EAA1BxB,SAEtBA,EAAarB,KAAKZ,MAAlBiC,SAER,GAAIwB,EAAaC,SAAWzB,EAASyB,OAAQ,CAC3C,IAAMC,EAAOV,KAAKW,UAAU,CAAE3B,SAAUA,IACxCkB,aAAaU,QAAQ,YAAaF,M,oBAItC,WACE,IACWjC,EAMPd,KANFZ,MAAS0B,OACTb,EAKED,KALFC,aACAN,EAIEK,KAJFL,uBACA+B,EAGE1B,KAHF0B,kBACA9B,EAEEI,KAFFJ,cACAsB,EACElB,KADFkB,gBAGF,OACE,eAAC,EAAD,WACE,2CACA,cAAC,EAAD,CACEjB,aAAcA,EACd,yBAAmBN,EACnBC,cAAeA,IAGjB,0CACA,cAAC,EAAD,CAAQkB,OAAQA,EAAQb,aAAcA,EAAaO,KAAKR,QACxD,cAAC,EAAD,CACEqB,SAAUK,EAAkBZ,GAC5BI,gBAAiBA,W,GAjGTR,aCDlBwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3a2aebae.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  width: 300px;\n  border: 2px solid #000;\n\n  label {\n    display: flex;\n    flex-direction: column;\n\n    &:not(:first-of-type) {\n      margin-top: 10px;\n    }\n  }\n\n  input {\n    margin-top: 4px;\n    width: 160px;\n\n    &:focus {\n      border: 2px solid #286fe0;\n      outline: none;\n    }\n  }\n\n  button {\n    margin-top: 20px;\n    padding: 4px;\n    max-width: 100px;\n    border: 0.2px solid #b7b7b7;\n    border-radius: 3px;\n    cursor: pointer;\n    transition: box-shadow 250ms linear, -webkit-box-shadow 250ms linear,\n      -moz-box-shadow 250ms linear;\n\n    &:hover {\n      -webkit-box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n      -moz-box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n      box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n    }\n\n    &:active {\n      color: #fff;\n      background-color: #286fe0;\n    }\n  }\n`;\n\nexport default Form;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport Form from './ContactForm.styled';\n\nexport default class ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  /*метод для обработки сабмита формы*/\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      state: { name, number },\n      props: { availabilityСheck, contactAdding },\n    } = this;\n\n    if (availabilityСheck(name) || !name || !number) {\n      return;\n    }\n\n    contactAdding({ id: uuidv4(), name, number });\n    this.setState({ name: '', number: '' });\n  };\n\n  /*метод для формирования разметки*/\n  render() {\n    const {\n      state: { name, number },\n      handleSubmit,\n      props: { handleChange },\n    } = this;\n\n    return (\n      <Form onSubmit={handleSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={handleChange.bind(this)}\n            value={name}\n          />\n        </label>\n        <label>\n          Phone number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={handleChange.bind(this)}\n            value={number}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  availabilityСheck: PropTypes.func.isRequired,\n  contactAdding: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nconst Label = styled.label`\n  display: flex;\n  flex-direction: column;\n\n  input {\n    margin-top: 4px;\n    width: 160px;\n\n    &:focus {\n      border: 2px solid #286fe0;\n      outline: none;\n    }\n  }\n`;\n\nexport default Label;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from './Filter.styled';\n\nconst Filter = ({ filter, handleChange }) => {\n  return (\n    <Label>\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" onChange={handleChange} value={filter} />\n    </Label>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nconst ListItem = styled.li`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  padding-left: 20px;\n\n  &:not(:last-of-type) {\n    margin-bottom: 12px;\n  }\n\n  ::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 50%;\n    transform: translateY(-50%);\n\n    width: 4px;\n    height: 4px;\n    background-color: #000;\n    border: 1px solid #000;\n    border-radius: 50%;\n  }\n\n  span {\n    display: inline-block;\n  }\n\n  button {\n    display: inline-block;\n    padding: 1px 4px;\n    margin-left: 10px;\n    border: 0.5px solid #b7b7b7;\n    border-radius: 4px;\n    font-size: 11px;\n    line-height: 1;\n\n    &:hover {\n      -webkit-box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n      -moz-box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n      box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n    }\n\n    &:active {\n      background-color: #286fe0;\n    }\n  }\n`;\n\nexport default ListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from './ContactItem.styled';\n\nconst ContactItem = ({ id, name, number, contactRemoving }) => {\n  return (\n    <ListItem>\n      <span>{`${name}: ${number}`}</span>\n      <button type=\"button\" data-id={id} onClick={() => contactRemoving(id)}>\n        Delete\n      </button>\n    </ListItem>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  contactRemoving: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactItem from '../ContactItem';\n\nconst ContactList = ({ contacts, contactRemoving }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          contactRemoving={contactRemoving}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  contactRemoving: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  padding: 60px;\n`;\n\nexport default Container;\n","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport Container from './App.styled';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  /*метод для фильтрации контактов*/\n  contactsFiltering = key => {\n    return this.state.contacts.filter(({ name }) =>\n      name.toLowerCase().includes(key.toLowerCase()),\n    );\n  };\n\n  /*метод для добавления елемента в контакты*/\n  contactAdding = newContact => {\n    this.setState(({ contacts, filter }) => ({\n      contacts: [...contacts, newContact],\n      filter,\n    }));\n  };\n\n  /*метод для удаления елемента в контактах*/\n  contactRemoving = id => {\n    this.setState(({ contacts, filter }) => {\n      return {\n        contacts: contacts.filter(elem => elem.id !== id),\n        filter,\n      };\n    });\n  };\n\n  /*метод для проверки присутствия контакта с указанным именем*/\n  availabilityСheck = inputName => {\n    const existingСontact = this.state.contacts.find(\n      ({ name }) => name.toLowerCase() === inputName.toLowerCase(),\n    );\n\n    if (existingСontact) {\n      alert(`${inputName} is already in contacts`);\n      return true;\n    }\n    return false;\n  };\n\n  /*метод для обработки введения данных в input*/\n  handleChange(e) {\n    const name = e.target.name;\n    this.setState({ [name]: e.target.value.trim() });\n  }\n\n  componentDidMount() {\n    /*получение объекта с массивом контактов из localStorage в state*/\n    let contacts;\n    try {\n      contacts = JSON.parse(localStorage.getItem('phonebook'));\n    } catch (error) {\n      console.log(error);\n    }\n\n    if (contacts) {\n      this.setState(contacts);\n    }\n  }\n\n  componentDidUpdate(prevProps, { contacts: prevContacts }) {\n    /*Добавление объекта с массивом контактов в localStorage*/\n    const { contacts } = this.state;\n\n    if (prevContacts.length !== contacts.length) {\n      const data = JSON.stringify({ contacts: contacts });\n      localStorage.setItem('phonebook', data);\n    }\n  }\n\n  render() {\n    const {\n      state: { filter },\n      handleChange,\n      availabilityСheck,\n      contactsFiltering,\n      contactAdding,\n      contactRemoving,\n    } = this;\n\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm\n          handleChange={handleChange}\n          availabilityСheck={availabilityСheck}\n          contactAdding={contactAdding}\n        />\n\n        <h2>Contacts</h2>\n        <Filter filter={filter} handleChange={handleChange.bind(this)} />\n        <ContactList\n          contacts={contactsFiltering(filter)}\n          contactRemoving={contactRemoving}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}